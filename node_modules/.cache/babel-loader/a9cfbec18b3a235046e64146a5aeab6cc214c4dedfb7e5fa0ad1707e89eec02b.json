{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/Elite PC/projects/challenge/src/hooks/useWrappedRequest.ts"],"sourcesContent":["import { useCallback, useContext, useState } from \"react\"\nimport { AppContext } from \"../utils/context\"\n\n// export function useWrappedRequest() {\n//   const [loading, setLoading] = useState(false)\n//   const { setError } = useContext(AppContext)\n\n//   const wrappedRequest = useCallback(\n//     async <TData extends any = void>(promise: () => Promise<TData>): Promise<TData | null> => {\n//       try {\n//         setLoading(true)\n//         const result = await promise()\n//         return result\n//       } catch (error) {\n//         setError(error as string)\n//         return null\n//       } finally {\n//         setLoading(false)\n//       }\n//     },\n//     [setError]\n//   )\n\n//   return { loading, wrappedRequest }\n// }\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}